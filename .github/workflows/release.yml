name: 🚀 BilirkisiAramaSistemi Release

on:
  push:
    tags:
      - 'bilirkisi-arama-sistemi-v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
        type: string

permissions:
  contents: write

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_NAME: 'BilirkisiMasaustu'
  APP_NAME: 'BilirkisiAramaSistemi'

jobs:
  release:
    name: 🏗️ Build and Release
    runs-on: windows-2022
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📋 Extract Version
        id: version
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $version = "${{ github.event.inputs.version }}"
            $tagName = "bilirkisi-arama-sistemi-v$version"
          } else {
            $tagName = "${{ github.ref_name }}"
            $version = $tagName -replace '^bilirkisi-arama-sistemi-v', ''
          }

          Write-Output "VERSION=$version" >> $env:GITHUB_OUTPUT
          Write-Output "TAG_NAME=$tagName" >> $env:GITHUB_OUTPUT
          Write-Output "PACKAGE_NAME=BilirkisiAramaSistemi-v$version-Windows-x64" >> $env:GITHUB_OUTPUT
          
          Write-Host "Version: $version"
          Write-Host "Tag: $tagName"

      - name: 🔄 Restore Dependencies
        shell: pwsh
        run: |
          Write-Host "Restoring NuGet packages..."
          dotnet restore ${{ env.PROJECT_NAME }}.csproj --verbosity minimal

      - name: 🏗️ Build Application
        shell: pwsh
        run: |
          Write-Host "Building application..."
          dotnet build ${{ env.PROJECT_NAME }}.csproj `
            --configuration Release `
            --no-restore `
            --verbosity minimal

      - name: 📦 Publish Self-Contained
        shell: pwsh
        run: |
          Write-Host "Publishing self-contained application..."
          
          dotnet publish ${{ env.PROJECT_NAME }}.csproj `
            --configuration Release `
            --runtime win-x64 `
            --self-contained true `
            --output ./dist `
            /p:PublishSingleFile=true `
            /p:EnableCompressionInSingleFile=true `
            /p:DebuggerSupport=false `
            /p:PublishReadyToRun=true `
            /p:IncludeNativeLibrariesForSelfExtract=true `
            --verbosity minimal
          
          if (-not (Test-Path "./dist/${{ env.PROJECT_NAME }}.exe")) {
            throw "Published executable not found!"
          }
          
          Write-Host "✅ Publish successful"

      - name: 📁 Create Release Package
        id: package
        shell: pwsh
        run: |
          $packageName = "${{ steps.version.outputs.PACKAGE_NAME }}"
          $packageDir = "./$packageName"
          
          Write-Host "Creating release package: $packageName"
          
          # Create package directory
          New-Item -ItemType Directory -Path $packageDir -Force | Out-Null
          
          # Copy executable
          Copy-Item "./dist/${{ env.PROJECT_NAME }}.exe" "$packageDir/"
          Write-Host "✅ Copied executable"
          
          # Copy data folder
          if (Test-Path "./iller") {
            Copy-Item "./iller" "$packageDir/" -Recurse
            Write-Host "✅ Copied iller folder"
          }
          
          # Copy documentation
          if (Test-Path "README.md") { Copy-Item "README.md" "$packageDir/" }
          if (Test-Path "LICENSE") { Copy-Item "LICENSE" "$packageDir/" }
          
          # Create installation instructions
          $instructions = "BilirkisiAramaSistemi v${{ steps.version.outputs.VERSION }}`n`nKURULUM:`n1. BilirkisiMasaustu.exe dosyasina cift tiklayin`n2. Uygulama dogrudan calisacaktir`n`nGereksinimler: Yok (.NET 8 dahil)`nGelistirici: Saffet Celik`nE-posta: iletisim@saffetcelik.com.tr"
          
          Set-Content "$packageDir/KURULUM.txt" $instructions
          Write-Host "✅ Created installation instructions"
          
          # Create ZIP package
          $zipPath = "./$packageName.zip"
          Compress-Archive -Path "$packageDir/*" -DestinationPath $zipPath -Force
          Write-Host "✅ Created ZIP package"
          
          # Calculate sizes
          $exeSize = [math]::Round((Get-Item "./dist/${{ env.PROJECT_NAME }}.exe").Length / 1MB, 2)
          $zipSize = [math]::Round((Get-Item $zipPath).Length / 1MB, 2)
          
          Write-Output "EXE_SIZE=$exeSize" >> $env:GITHUB_OUTPUT
          Write-Output "ZIP_SIZE=$zipSize" >> $env:GITHUB_OUTPUT
          Write-Output "ZIP_PATH=$zipPath" >> $env:GITHUB_OUTPUT
          
          Write-Host "📊 Package Info:"
          Write-Host "   Executable: $exeSize MB"
          Write-Host "   ZIP Package: $zipSize MB"

      - name: 🏷️ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.TAG_NAME }}
          name: "${{ env.APP_NAME }} v${{ steps.version.outputs.VERSION }}"
          body: |
            ## 🚀 ${{ env.APP_NAME }} v${{ steps.version.outputs.VERSION }}

            Modern bilirkişi arama ve yönetim sistemi - Performanslı release sürümü

            ### 📦 İndirme Bilgileri
            - **Platform:** Windows x64
            - **Executable Boyutu:** ${{ steps.package.outputs.EXE_SIZE }} MB
            - **Paket Boyutu:** ${{ steps.package.outputs.ZIP_SIZE }} MB
            - **Gereksinimler:** Hiçbiri (.NET 8 runtime dahil)

            ### 🔧 Hızlı Kurulum
            1. ZIP dosyasını indirin ve çıkartın
            2. `${{ env.PROJECT_NAME }}.exe` dosyasına çift tıklayın
            3. Uygulama doğrudan çalışır - ek kurulum gerekmez!

            ### ✨ Özellikler
            - Gelişmiş bilirkişi arama sistemi
            - İstatistik ve analiz modülü
            - Kurul seçimi ve hatırlama
            - Favori bilirkişi sistemi
            - 15 il için kapsamlı veri tabanı
            - Self-contained deployment
            - Optimize edilmiş performans
            - Modern WPF arayüzü

            ### 📧 İletişim
            - **Geliştirici:** Saffet Çelik
            - **E-posta:** iletisim@saffetcelik.com.tr
            - **GitHub:** github.com/saffetcelik
          files: ${{ steps.package.outputs.ZIP_PATH }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.version.outputs.PACKAGE_NAME }}
          path: |
            ${{ steps.package.outputs.ZIP_PATH }}
            ./dist/${{ env.PROJECT_NAME }}.exe
          retention-days: 90
